server {
        listen 443 ssl http2;
        server_name knowledgebase.ai4team.vn;  # Change to your domain

        # SSL/TLS Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # CORS: Allow only whitelisted origins. Populate this map with the origins
    # you trust. For automated deployments you can template this file and
    # substitute a comma-separated list from an environment variable like
    # ALLOW_CORG_ORIGIN into the map entries.
    # Example: ALLOW_CORS_ORIGIN="https://app.example.com,https://knowledgebase.ai4team.vn"
    #
    # Optional: if you need to allow custom URI schemes (for non-browser clients
    # that emit an Origin with a custom scheme like myapp://callback), set
    # CORS_ALLOW_CUSTOM_SCHEME to 1 at deploy time. Because nginx cannot read
    # env vars at runtime, set this by templating this config or replacing the
    # `set $CORS_ALLOW_CUSTOM_SCHEME` value below.
    # Example (templated): CORS_ALLOW_CUSTOM_SCHEME=1
    # WARNING: enabling custom-scheme Origins can widen the attack surface; only
    # enable if you trust the clients that will present such Origins.

    # Toggle to enable allowing custom-scheme origins (0 or 1). Replace at
    # deploy time with your templating tool if needed.
    set $CORS_ALLOW_CUSTOM_SCHEME "0";
        # Note: nginx does not expand env variables into config values directly; use your
        # config templating tool (envsubst, consul-template, ansible/jinja, etc.) to rewrite
        # the map entries at deploy time.
        # CORS map - autogenerated block. Do not edit between the markers; use
        # the helper scripts generate_kb_cors.sh / generate_kb_cors.ps1 to update
        # this block from environment variables.
        # CORS-MAP-START
        map $http_origin $cors_allowed {
            default 0;
            # Add allowed origins below (one per line). Example entries (auto-generated):
            "https://knowledgebase.ai4team.vn" 1;
            "https://app.example.com" 1;
            "http://localhost:3000" 1;
        }
        # CORS-MAP-END

        # Custom-scheme handling
        #
        # You can configure a semicolon-separated list of allowed custom schemes
        # via the environment variable `CORS_ALLOW_CUSTM_SCHEME` (note spelling).
        # Example value: CORS_ALLOW_CUSTM_SCHEME="app;file;electron;my-custom-scheme"
        #
        # At deploy time, transform that list into explicit map entries that match
        # origins starting with the scheme. For example, the value above should
        # produce these map lines (one per scheme):
        #     "~^app://" 1;
        #     "~^file://" 1;
        #     "~^electron://" 1;
        #     "~^my-custom-scheme://" 1;
        #
        # Because nginx configs can't read env vars at runtime, use a templating
        # step (envsubst, Ansible/Jinja, consul-template, a startup script, etc.)
        # to expand CORS_ALLOW_CUSTM_SCHEME into the map below.
        map $http_origin $cors_custom_scheme_allowed {
            default 0;
            # Templated entries go here. Example:
            # "~^app://" 1;
            # "~^file://" 1;
            # "~^electron://" 1;
        }

        # Final custom-scheme allowance: true only if origin matches an allowed custom scheme
        map $cors_custom_scheme_allowed $cors_custom_allowed {
            default 0;
            1 1;
        }

        # Final combined allow flag: either explicitly whitelisted OR allowed via custom-scheme toggle
        map "$cors_allowed:$cors_custom_allowed" $cors_any_allowed {
            default 0;
            "1:0" 1;
            "0:1" 1;
            "1:1" 1;
        }
        # Logging
        access_log /var/log/nginx/knowledgebase_access.log main;
        error_log /var/log/nginx/knowledgebase_error.log warn;

        # IP Whitelist for sensitive endpoints
        # Define trusted IPs (internal network, admin servers, etc.)
        geo $restrict_api_access {
            default 1;
            127.0.0.1 0;              # localhost
            192.168.1.0/24 0;         # Internal network
            10.0.0.0/8 0;             # Private network
            # Add more trusted IPs as needed
            # 203.0.113.0/24 0;        # Example: external trusted IP
        }

        location / {
            proxy_pass http://127.0.0.1:8081;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            # Forward the Origin header for upstream use and conditionally set CORS headers
            proxy_set_header Origin $http_origin;
            # If origin is allowed (explicit whitelist OR custom-scheme allowance), emit CORS headers
            add_header Access-Control-Allow-Origin "$http_origin" always if=$cors_any_allowed;
            add_header Access-Control-Allow-Credentials "true" always if=$cors_any_allowed;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always if=$cors_any_allowed;
            add_header Access-Control-Allow-Headers "Authorization,Content-Type,Accept" always if=$cors_any_allowed;
        }

        # Restrict /api/* endpoints - internal only
        location ~ ^/api/ {
            # Check IP whitelist
            if ($restrict_api_access = 1) {
                return 403;
            }
            
            proxy_pass http://127.0.0.1:8081;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            
            # Add logging for API access
            access_log /var/log/nginx/knowledgebase_api_access.log main;
        }

        # Handle CORS preflight requests centrally and securely
        location /__cors_preflight__ {
            # Only respond to preflight if origin is allowed (whitelist or custom-scheme)
            if ($cors_any_allowed = 0) {
                return 403;
            }
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization,Content-Type,Accept" always;
            # no body
            return 204;
        }

        # Restrict /v1/system/* endpoints - internal only
        location ~ ^/v1/system/ {
            # Check IP whitelist
            if ($restrict_api_access = 1) {
                return 403;
            }
            
            proxy_pass http://127.0.0.1:8081;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            
            # Add logging for system endpoint access
            access_log /var/log/nginx/knowledgebase_system_access.log main;
        }

        # Restrict /v1/admin/* endpoints - admin only
        location ~ ^/v1/admin/ {
            # Check IP whitelist
            if ($restrict_api_access = 1) {
                return 403;
            }
            
            proxy_pass http://127.0.0.1:8081;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_connect_timeout 5s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            
            # Add logging for admin access
            access_log /var/log/nginx/knowledgebase_admin_access.log main;
        }
}