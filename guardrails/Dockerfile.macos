# Optimized Dockerfile for macOS with Apple Silicon (M1/M2/M3)
# This Dockerfile is specifically optimized for ARM64 architecture
FROM --platform=linux/arm64 python:3.12-slim

WORKDIR /app

# Build arguments
ARG PYTHON_VERSION=3.12
ARG TORCH_VERSION=2.1.0

LABEL maintainer="AI4Team"
LABEL description="Ollama Guard Proxy optimized for Apple Silicon macOS servers"
LABEL architecture="arm64"

# Install system dependencies optimized for ARM64
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    gcc \
    g++ \
    make \
    cmake \
    git \
    libgomp1 \
    libomp-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Upgrade pip and install build tools
RUN pip install --no-cache-dir --upgrade \
    pip==23.3.1 \
    setuptools==69.0.2 \
    wheel==0.42.0

# Install PyTorch optimized for ARM64/CPU
# Note: When running on macOS host with MPS, the host's PyTorch with MPS support will be used
RUN pip install --no-cache-dir \
    torch==2.1.0 \
    --index-url https://download.pytorch.org/whl/cpu

# Copy Python project configuration first for better layer caching
COPY pyproject.toml setup.py MANIFEST.in ./
COPY requirements.txt ./

# Copy and install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application source code in proper package structure  
COPY main.py ./
COPY src/ ./src/
COPY config/ ./config/

# Install the package in editable mode for development
# This ensures proper Python package structure and importability
RUN pip install --no-cache-dir -e .

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/models /app/cache && \
    chmod 755 /app/logs /app/models /app/cache

# Environment variables optimized for Apple Silicon
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PYTHONPATH=/app/src \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    # ARM64/Apple Silicon optimizations
    OMP_NUM_THREADS=8 \
    MKL_NUM_THREADS=8 \
    OPENBLAS_NUM_THREADS=8 \
    VECLIB_MAXIMUM_THREADS=8 \
    # PyTorch settings for optimal ARM64 performance
    PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0 \
    PYTORCH_ENABLE_MPS_FALLBACK=1 \
    # LLM Guard configuration
    LLM_GUARD_DEVICE=cpu \
    LLM_GUARD_USE_LOCAL_MODELS=false \
    # Default configuration
    PROXY_HOST=0.0.0.0 \
    PROXY_PORT=8080 \
    CONFIG_FILE=/app/config/config.yaml \
    # Enable MPS when available (for native macOS execution)
    MPS_ENABLE_FP16=true \
    # Security settings
    PYTHONHTTPSVERIFY=1 \
    # Performance tuning
    MALLOC_ARENA_MAX=2 \
    MALLOC_MMAP_THRESHOLD_=131072 \
    MALLOC_TRIM_THRESHOLD_=131072 \
    MALLOC_TOP_PAD_=131072 \
    MALLOC_MMAP_MAX_=65536

# Create non-root user for security best practices
RUN useradd -m -u 1000 -s /bin/bash appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose proxy port
EXPOSE 8080

# Health check optimized for startup time
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=5 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use the proper entry point - optimized for Apple Silicon
# Multiple options for flexibility:
# Option 1: Direct module execution (recommended)
CMD ["python", "-m", "ollama_guardrails", "server"]
# Option 2: Via main.py (fallback)
# CMD ["python", "main.py"]
# Option 3: Via uvicorn directly with Apple Silicon optimizations
# CMD ["uvicorn", "ollama_guardrails.app:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "4"]
